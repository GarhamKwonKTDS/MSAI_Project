// Simple Node.js server to serve OSS Chatbot Frontend
// server.js

const http = require("http");
const fs = require("fs");
const path = require("path");
const url = require("url");

// Configuration
const PORT = process.env.PORT || 8081;
const API_BASE_URL = process.env.API_BASE_URL || "http://localhost:8080";

console.log("🌐 OSS Chatbot Frontend Server");
console.log(`📱 Port: ${PORT}`);
console.log(`🔗 API Backend: ${API_BASE_URL}`);

// MIME types for different file extensions
const mimeTypes = {
    ".html": "text/html",
    ".js": "text/javascript",
    ".css": "text/css",
    ".json": "application/json",
    ".png": "image/png",
    ".jpg": "image/jpeg",
    ".gif": "image/gif",
    ".ico": "image/x-icon",
    ".svg": "image/svg+xml",
};

// Get content type based on file extension
function getContentType(filePath) {
    const ext = path.extname(filePath).toLowerCase();
    return mimeTypes[ext] || "application/octet-stream";
}

// Serve static files
function serveStaticFile(res, filePath) {
    const fullPath = path.join(__dirname, filePath);

    fs.readFile(fullPath, (error, content) => {
        if (error) {
            if (error.code === "ENOENT") {
                // File not found
                res.writeHead(404, { "Content-Type": "text/html" });
                res.end(`
                    <html>
                        <body>
                            <h1>404 - File Not Found</h1>
                            <p>The requested file ${filePath} was not found.</p>
                            <p><a href="/">Go back to home</a></p>
                        </body>
                    </html>
                `);
            } else {
                // Server error
                res.writeHead(500, { "Content-Type": "text/html" });
                res.end(`
                    <html>
                        <body>
                            <h1>500 - Server Error</h1>
                            <p>Error reading file: ${error.message}</p>
                        </body>
                    </html>
                `);
            }
        } else {
            // Success - serve the file
            const contentType = getContentType(filePath);
            res.writeHead(200, {
                "Content-Type": contentType,
                "Cache-Control": "no-cache", // Disable caching for development
            });
            res.end(content, "utf-8");
        }
    });
}

// Handle dynamic config injection for config.js
function serveConfigJS(res) {
    const configContent = `// Configuration for OSS Chatbot Frontend
// This file is dynamically generated by server.js

const ChatbotConfig = {
    // API Configuration
    api: {
        // Backend API URL (dynamically set by server)
        getBaseUrl: function() {
            return '${API_BASE_URL}';
        },
        
        // Endpoints
        endpoints: {
            health: '/health',
            chat: '/chat'
        },
        
        // Request configuration
        timeout: 30000,  // 30 seconds
        maxRetries: 3,
        retryDelay: 1000
    },
    
    // UI Configuration
    ui: {
        // Messages
        messages: {
            welcome: \`안녕하세요! OSS VoC 지원 챗봇입니다. 🤖

다음과 같은 문제를 도와드릴 수 있습니다:
• OSS/NEOSS 로그인 문제
• 계정 권한 신청
• 비밀번호 관련 이슈
• 사용자 정보 동기화

무엇을 도와드릴까요?\`,
            
            connectionError: '서버에 연결할 수 없습니다. 페이지를 새로고침해주세요.',
            generalError: '죄송합니다. 일시적인 오류가 발생했습니다. 잠시 후 다시 시도해주세요.',
            processing: '응답을 기다리는 중...'
        },
        
        // Input limits
        maxMessageLength: 1000,
        
        // Animation settings
        animationDuration: 300,
        typingDelay: 100
    },
    
    // Session configuration
    session: {
        generateId: function() {
            return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        }
    },
    
    // Debug mode (set to false in production)
    debug: ${process.env.NODE_ENV !== "production"},
    
    // Feature flags
    features: {
        ragInfo: true,       // Show when RAG is used
        connectionStatus: true,
        retryOnError: true,
        autoResize: true
    }
};`;

    res.writeHead(200, {
        "Content-Type": "text/javascript",
        "Cache-Control": "no-cache",
    });
    res.end(configContent);
}

// Create HTTP server
const server = http.createServer((req, res) => {
    const parsedUrl = url.parse(req.url);
    let pathname = parsedUrl.pathname;

    // Log requests (for debugging)
    console.log(`${new Date().toISOString()} - ${req.method} ${pathname}`);

    // Add CORS headers for API calls
    res.setHeader("Access-Control-Allow-Origin", "*");
    res.setHeader(
        "Access-Control-Allow-Methods",
        "GET, POST, PUT, DELETE, OPTIONS"
    );
    res.setHeader(
        "Access-Control-Allow-Headers",
        "Content-Type, Authorization"
    );

    // Handle preflight requests
    if (req.method === "OPTIONS") {
        res.writeHead(200);
        res.end();
        return;
    }

    // Route handling
    if (pathname === "/" || pathname === "/index.html") {
        // Serve main page
        serveStaticFile(res, "index.html");
    } else if (pathname === "/config.js") {
        // Dynamically generate config.js with correct API URL
        serveConfigJS(res);
    } else {
        // Serve other static files
        serveStaticFile(res, pathname);
    }
});

// Start server
server.listen(PORT, () => {
    const FRONTEND_URL =
        process.env.NODE_ENV === "production"
            ? `https://${process.env.WEBSITE_SITE_NAME}.azurewebsites.net`
            : `http://localhost:${PORT}`;

    console.log("");
    console.log("🚀 OSS Chatbot Frontend Server started!");
    console.log("================================");
    console.log(`📱 Frontend URL: ${FRONTEND_URL}`);
    console.log(`🔗 Backend API: ${API_BASE_URL}`);
    console.log("");
    console.log("📂 Serving files from: " + __dirname);
    console.log("");
    console.log("Press Ctrl+C to stop the server");
    console.log("");
});

// Handle graceful shutdown
process.on("SIGINT", () => {
    console.log("");
    console.log("🛑 Frontend server shutting down...");
    server.close(() => {
        console.log("✅ Frontend server stopped");
        process.exit(0);
    });
});

process.on("SIGTERM", () => {
    console.log("");
    console.log("🛑 Frontend server received SIGTERM...");
    server.close(() => {
        console.log("✅ Frontend server stopped");
        process.exit(0);
    });
});
